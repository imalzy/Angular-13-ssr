{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Http2CallStream = exports.InterceptingListenerImpl = exports.isInterceptingListener = void 0;\n\nconst http2 = require(\"http2\");\n\nconst os = require(\"os\");\n\nconst constants_1 = require(\"./constants\");\n\nconst metadata_1 = require(\"./metadata\");\n\nconst stream_decoder_1 = require(\"./stream-decoder\");\n\nconst logging = require(\"./logging\");\n\nconst constants_2 = require(\"./constants\");\n\nconst TRACER_NAME = 'call_stream';\nconst {\n  HTTP2_HEADER_STATUS,\n  HTTP2_HEADER_CONTENT_TYPE,\n  NGHTTP2_CANCEL\n} = http2.constants;\n/**\n * Should do approximately the same thing as util.getSystemErrorName but the\n * TypeScript types don't have that function for some reason so I just made my\n * own.\n * @param errno\n */\n\nfunction getSystemErrorName(errno) {\n  for (const [name, num] of Object.entries(os.constants.errno)) {\n    if (num === errno) {\n      return name;\n    }\n  }\n\n  return 'Unknown system error ' + errno;\n}\n\nfunction getMinDeadline(deadlineList) {\n  let minValue = Infinity;\n\n  for (const deadline of deadlineList) {\n    const deadlineMsecs = deadline instanceof Date ? deadline.getTime() : deadline;\n\n    if (deadlineMsecs < minValue) {\n      minValue = deadlineMsecs;\n    }\n  }\n\n  return minValue;\n}\n\nfunction isInterceptingListener(listener) {\n  return listener.onReceiveMetadata !== undefined && listener.onReceiveMetadata.length === 1;\n}\n\nexports.isInterceptingListener = isInterceptingListener;\n\nclass InterceptingListenerImpl {\n  constructor(listener, nextListener) {\n    this.listener = listener;\n    this.nextListener = nextListener;\n    this.processingMetadata = false;\n    this.hasPendingMessage = false;\n    this.processingMessage = false;\n    this.pendingStatus = null;\n  }\n\n  processPendingMessage() {\n    if (this.hasPendingMessage) {\n      this.nextListener.onReceiveMessage(this.pendingMessage);\n      this.pendingMessage = null;\n      this.hasPendingMessage = false;\n    }\n  }\n\n  processPendingStatus() {\n    if (this.pendingStatus) {\n      this.nextListener.onReceiveStatus(this.pendingStatus);\n    }\n  }\n\n  onReceiveMetadata(metadata) {\n    this.processingMetadata = true;\n    this.listener.onReceiveMetadata(metadata, metadata => {\n      this.processingMetadata = false;\n      this.nextListener.onReceiveMetadata(metadata);\n      this.processPendingMessage();\n      this.processPendingStatus();\n    });\n  } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  onReceiveMessage(message) {\n    /* If this listener processes messages asynchronously, the last message may\n     * be reordered with respect to the status */\n    this.processingMessage = true;\n    this.listener.onReceiveMessage(message, msg => {\n      this.processingMessage = false;\n\n      if (this.processingMetadata) {\n        this.pendingMessage = msg;\n        this.hasPendingMessage = true;\n      } else {\n        this.nextListener.onReceiveMessage(msg);\n        this.processPendingStatus();\n      }\n    });\n  }\n\n  onReceiveStatus(status) {\n    this.listener.onReceiveStatus(status, processedStatus => {\n      if (this.processingMetadata || this.processingMessage) {\n        this.pendingStatus = processedStatus;\n      } else {\n        this.nextListener.onReceiveStatus(processedStatus);\n      }\n    });\n  }\n\n}\n\nexports.InterceptingListenerImpl = InterceptingListenerImpl;\n\nclass Http2CallStream {\n  constructor(methodName, channel, options, filterStackFactory, channelCallCredentials, callNumber) {\n    this.methodName = methodName;\n    this.channel = channel;\n    this.options = options;\n    this.channelCallCredentials = channelCallCredentials;\n    this.callNumber = callNumber;\n    this.http2Stream = null;\n    this.pendingRead = false;\n    this.isWriteFilterPending = false;\n    this.pendingWrite = null;\n    this.pendingWriteCallback = null;\n    this.writesClosed = false;\n    this.decoder = new stream_decoder_1.StreamDecoder();\n    this.isReadFilterPending = false;\n    this.canPush = false;\n    /**\n     * Indicates that an 'end' event has come from the http2 stream, so there\n     * will be no more data events.\n     */\n\n    this.readsClosed = false;\n    this.statusOutput = false;\n    this.unpushedReadMessages = [];\n    this.unfilteredReadMessages = []; // Status code mapped from :status. To be used if grpc-status is not received\n\n    this.mappedStatusCode = constants_1.Status.UNKNOWN; // This is populated (non-null) if and only if the call has ended\n\n    this.finalStatus = null;\n    this.subchannel = null;\n    this.listener = null;\n    this.internalError = null;\n    this.configDeadline = Infinity;\n    this.statusWatchers = [];\n    this.streamEndWatchers = [];\n    this.callStatsTracker = null;\n    this.filterStack = filterStackFactory.createFilter(this);\n    this.credentials = channelCallCredentials;\n\n    this.disconnectListener = () => {\n      this.endCall({\n        code: constants_1.Status.UNAVAILABLE,\n        details: 'Connection dropped',\n        metadata: new metadata_1.Metadata()\n      });\n    };\n\n    if (this.options.parentCall && this.options.flags & constants_1.Propagate.CANCELLATION) {\n      this.options.parentCall.on('cancelled', () => {\n        this.cancelWithStatus(constants_1.Status.CANCELLED, 'Cancelled by parent call');\n      });\n    }\n  }\n\n  outputStatus() {\n    var _a;\n    /* Precondition: this.finalStatus !== null */\n\n\n    if (this.listener && !this.statusOutput) {\n      this.statusOutput = true;\n      const filteredStatus = this.filterStack.receiveTrailers(this.finalStatus);\n      this.trace('ended with status: code=' + filteredStatus.code + ' details=\"' + filteredStatus.details + '\"');\n      this.statusWatchers.forEach(watcher => watcher(filteredStatus));\n      /* We delay the actual action of bubbling up the status to insulate the\n       * cleanup code in this class from any errors that may be thrown in the\n       * upper layers as a result of bubbling up the status. In particular,\n       * if the status is not OK, the \"error\" event may be emitted\n       * synchronously at the top level, which will result in a thrown error if\n       * the user does not handle that event. */\n\n      process.nextTick(() => {\n        var _a;\n\n        (_a = this.listener) === null || _a === void 0 ? void 0 : _a.onReceiveStatus(filteredStatus);\n      });\n      /* Leave the http2 stream in flowing state to drain incoming messages, to\n       * ensure that the stream closure completes. The call stream already does\n       * not push more messages after the status is output, so the messages go\n       * nowhere either way. */\n\n      (_a = this.http2Stream) === null || _a === void 0 ? void 0 : _a.resume();\n\n      if (this.subchannel) {\n        this.subchannel.callUnref();\n        this.subchannel.removeDisconnectListener(this.disconnectListener);\n      }\n    }\n  }\n\n  trace(text) {\n    logging.trace(constants_2.LogVerbosity.DEBUG, TRACER_NAME, '[' + this.callNumber + '] ' + text);\n  }\n  /**\n   * On first call, emits a 'status' event with the given StatusObject.\n   * Subsequent calls are no-ops.\n   * @param status The status of the call.\n   */\n\n\n  endCall(status) {\n    /* If the status is OK and a new status comes in (e.g. from a\n     * deserialization failure), that new status takes priority */\n    if (this.finalStatus === null || this.finalStatus.code === constants_1.Status.OK) {\n      this.finalStatus = status;\n      this.maybeOutputStatus();\n    }\n\n    this.destroyHttp2Stream();\n  }\n\n  maybeOutputStatus() {\n    if (this.finalStatus !== null) {\n      /* The combination check of readsClosed and that the two message buffer\n       * arrays are empty checks that there all incoming data has been fully\n       * processed */\n      if (this.finalStatus.code !== constants_1.Status.OK || this.readsClosed && this.unpushedReadMessages.length === 0 && this.unfilteredReadMessages.length === 0 && !this.isReadFilterPending) {\n        this.outputStatus();\n      }\n    }\n  }\n\n  push(message) {\n    this.trace('pushing to reader message of length ' + (message instanceof Buffer ? message.length : null));\n    this.canPush = false;\n    process.nextTick(() => {\n      var _a;\n      /* If we have already output the status any later messages should be\n       * ignored, and can cause out-of-order operation errors higher up in the\n       * stack. Checking as late as possible here to avoid any race conditions.\n       */\n\n\n      if (this.statusOutput) {\n        return;\n      }\n\n      (_a = this.listener) === null || _a === void 0 ? void 0 : _a.onReceiveMessage(message);\n      this.maybeOutputStatus();\n    });\n  }\n\n  handleFilterError(error) {\n    this.cancelWithStatus(constants_1.Status.INTERNAL, error.message);\n  }\n\n  handleFilteredRead(message) {\n    /* If we the call has already ended with an error, we don't want to do\n     * anything with this message. Dropping it on the floor is correct\n     * behavior */\n    if (this.finalStatus !== null && this.finalStatus.code !== constants_1.Status.OK) {\n      this.maybeOutputStatus();\n      return;\n    }\n\n    this.isReadFilterPending = false;\n\n    if (this.canPush) {\n      this.http2Stream.pause();\n      this.push(message);\n    } else {\n      this.trace('unpushedReadMessages.push message of length ' + message.length);\n      this.unpushedReadMessages.push(message);\n    }\n\n    if (this.unfilteredReadMessages.length > 0) {\n      /* nextMessage is guaranteed not to be undefined because\n         unfilteredReadMessages is non-empty */\n      const nextMessage = this.unfilteredReadMessages.shift();\n      this.filterReceivedMessage(nextMessage);\n    }\n  }\n\n  filterReceivedMessage(framedMessage) {\n    /* If we the call has already ended with an error, we don't want to do\n     * anything with this message. Dropping it on the floor is correct\n     * behavior */\n    if (this.finalStatus !== null && this.finalStatus.code !== constants_1.Status.OK) {\n      this.maybeOutputStatus();\n      return;\n    }\n\n    this.trace('filterReceivedMessage of length ' + framedMessage.length);\n    this.isReadFilterPending = true;\n    this.filterStack.receiveMessage(Promise.resolve(framedMessage)).then(this.handleFilteredRead.bind(this), this.handleFilterError.bind(this));\n  }\n\n  tryPush(messageBytes) {\n    if (this.isReadFilterPending) {\n      this.trace('unfilteredReadMessages.push message of length ' + (messageBytes && messageBytes.length));\n      this.unfilteredReadMessages.push(messageBytes);\n    } else {\n      this.filterReceivedMessage(messageBytes);\n    }\n  }\n\n  handleTrailers(headers) {\n    this.streamEndWatchers.forEach(watcher => watcher(true));\n    let headersString = '';\n\n    for (const header of Object.keys(headers)) {\n      headersString += '\\t\\t' + header + ': ' + headers[header] + '\\n';\n    }\n\n    this.trace('Received server trailers:\\n' + headersString);\n    let metadata;\n\n    try {\n      metadata = metadata_1.Metadata.fromHttp2Headers(headers);\n    } catch (e) {\n      metadata = new metadata_1.Metadata();\n    }\n\n    const metadataMap = metadata.getMap();\n    let code = this.mappedStatusCode;\n\n    if (code === constants_1.Status.UNKNOWN && typeof metadataMap['grpc-status'] === 'string') {\n      const receivedStatus = Number(metadataMap['grpc-status']);\n\n      if (receivedStatus in constants_1.Status) {\n        code = receivedStatus;\n        this.trace('received status code ' + receivedStatus + ' from server');\n      }\n\n      metadata.remove('grpc-status');\n    }\n\n    let details = '';\n\n    if (typeof metadataMap['grpc-message'] === 'string') {\n      try {\n        details = decodeURI(metadataMap['grpc-message']);\n      } catch (e) {\n        details = metadataMap['grpc-message'];\n      }\n\n      metadata.remove('grpc-message');\n      this.trace('received status details string \"' + details + '\" from server');\n    }\n\n    const status = {\n      code,\n      details,\n      metadata\n    }; // This is a no-op if the call was already ended when handling headers.\n\n    this.endCall(status);\n  }\n\n  writeMessageToStream(message, callback) {\n    var _a;\n\n    (_a = this.callStatsTracker) === null || _a === void 0 ? void 0 : _a.addMessageSent();\n    this.http2Stream.write(message, callback);\n  }\n\n  attachHttp2Stream(stream, subchannel, extraFilters, callStatsTracker) {\n    this.filterStack.push(extraFilters);\n\n    if (this.finalStatus !== null) {\n      stream.close(NGHTTP2_CANCEL);\n    } else {\n      this.trace('attachHttp2Stream from subchannel ' + subchannel.getAddress());\n      this.http2Stream = stream;\n      this.subchannel = subchannel;\n      this.callStatsTracker = callStatsTracker;\n      subchannel.addDisconnectListener(this.disconnectListener);\n      subchannel.callRef();\n      stream.on('response', (headers, flags) => {\n        var _a;\n\n        let headersString = '';\n\n        for (const header of Object.keys(headers)) {\n          headersString += '\\t\\t' + header + ': ' + headers[header] + '\\n';\n        }\n\n        this.trace('Received server headers:\\n' + headersString);\n\n        switch (headers[':status']) {\n          // TODO(murgatroid99): handle 100 and 101\n          case 400:\n            this.mappedStatusCode = constants_1.Status.INTERNAL;\n            break;\n\n          case 401:\n            this.mappedStatusCode = constants_1.Status.UNAUTHENTICATED;\n            break;\n\n          case 403:\n            this.mappedStatusCode = constants_1.Status.PERMISSION_DENIED;\n            break;\n\n          case 404:\n            this.mappedStatusCode = constants_1.Status.UNIMPLEMENTED;\n            break;\n\n          case 429:\n          case 502:\n          case 503:\n          case 504:\n            this.mappedStatusCode = constants_1.Status.UNAVAILABLE;\n            break;\n\n          default:\n            this.mappedStatusCode = constants_1.Status.UNKNOWN;\n        }\n\n        if (flags & http2.constants.NGHTTP2_FLAG_END_STREAM) {\n          this.handleTrailers(headers);\n        } else {\n          let metadata;\n\n          try {\n            metadata = metadata_1.Metadata.fromHttp2Headers(headers);\n          } catch (error) {\n            this.endCall({\n              code: constants_1.Status.UNKNOWN,\n              details: error.message,\n              metadata: new metadata_1.Metadata()\n            });\n            return;\n          }\n\n          try {\n            const finalMetadata = this.filterStack.receiveMetadata(metadata);\n            (_a = this.listener) === null || _a === void 0 ? void 0 : _a.onReceiveMetadata(finalMetadata);\n          } catch (error) {\n            this.endCall({\n              code: constants_1.Status.UNKNOWN,\n              details: error.message,\n              metadata: new metadata_1.Metadata()\n            });\n          }\n        }\n      });\n      stream.on('trailers', headers => {\n        this.handleTrailers(headers);\n      });\n      stream.on('data', data => {\n        /* If the status has already been output, allow the http2 stream to\n         * drain without processing the data. */\n        if (this.statusOutput) {\n          return;\n        }\n\n        this.trace('receive HTTP/2 data frame of length ' + data.length);\n        const messages = this.decoder.write(data);\n\n        for (const message of messages) {\n          this.trace('parsed message of length ' + message.length);\n          this.callStatsTracker.addMessageReceived();\n          this.tryPush(message);\n        }\n      });\n      stream.on('end', () => {\n        this.readsClosed = true;\n        this.maybeOutputStatus();\n      });\n      stream.on('close', () => {\n        /* Use process.next tick to ensure that this code happens after any\n         * \"error\" event that may be emitted at about the same time, so that\n         * we can bubble up the error message from that event. */\n        process.nextTick(() => {\n          var _a;\n\n          this.trace('HTTP/2 stream closed with code ' + stream.rstCode);\n          /* If we have a final status with an OK status code, that means that\n           * we have received all of the messages and we have processed the\n           * trailers and the call completed successfully, so it doesn't matter\n           * how the stream ends after that */\n\n          if (((_a = this.finalStatus) === null || _a === void 0 ? void 0 : _a.code) === constants_1.Status.OK) {\n            return;\n          }\n\n          let code;\n          let details = '';\n\n          switch (stream.rstCode) {\n            case http2.constants.NGHTTP2_NO_ERROR:\n              /* If we get a NO_ERROR code and we already have a status, the\n               * stream completed properly and we just haven't fully processed\n               * it yet */\n              if (this.finalStatus !== null) {\n                return;\n              }\n\n              code = constants_1.Status.INTERNAL;\n              details = `Received RST_STREAM with code ${stream.rstCode}`;\n              break;\n\n            case http2.constants.NGHTTP2_REFUSED_STREAM:\n              code = constants_1.Status.UNAVAILABLE;\n              details = 'Stream refused by server';\n              break;\n\n            case http2.constants.NGHTTP2_CANCEL:\n              code = constants_1.Status.CANCELLED;\n              details = 'Call cancelled';\n              break;\n\n            case http2.constants.NGHTTP2_ENHANCE_YOUR_CALM:\n              code = constants_1.Status.RESOURCE_EXHAUSTED;\n              details = 'Bandwidth exhausted or memory limit exceeded';\n              break;\n\n            case http2.constants.NGHTTP2_INADEQUATE_SECURITY:\n              code = constants_1.Status.PERMISSION_DENIED;\n              details = 'Protocol not secure enough';\n              break;\n\n            case http2.constants.NGHTTP2_INTERNAL_ERROR:\n              code = constants_1.Status.INTERNAL;\n\n              if (this.internalError === null) {\n                /* This error code was previously handled in the default case, and\n                 * there are several instances of it online, so I wanted to\n                 * preserve the original error message so that people find existing\n                 * information in searches, but also include the more recognizable\n                 * \"Internal server error\" message. */\n                details = `Received RST_STREAM with code ${stream.rstCode} (Internal server error)`;\n              } else {\n                if (this.internalError.code === 'ECONNRESET' || this.internalError.code === 'ETIMEDOUT') {\n                  code = constants_1.Status.UNAVAILABLE;\n                  details = this.internalError.message;\n                } else {\n                  /* The \"Received RST_STREAM with code ...\" error is preserved\n                   * here for continuity with errors reported online, but the\n                   * error message at the end will probably be more relevant in\n                   * most cases. */\n                  details = `Received RST_STREAM with code ${stream.rstCode} triggered by internal client error: ${this.internalError.message}`;\n                }\n              }\n\n              break;\n\n            default:\n              code = constants_1.Status.INTERNAL;\n              details = `Received RST_STREAM with code ${stream.rstCode}`;\n          } // This is a no-op if trailers were received at all.\n          // This is OK, because status codes emitted here correspond to more\n          // catastrophic issues that prevent us from receiving trailers in the\n          // first place.\n\n\n          this.endCall({\n            code,\n            details,\n            metadata: new metadata_1.Metadata()\n          });\n        });\n      });\n      stream.on('error', err => {\n        /* We need an error handler here to stop \"Uncaught Error\" exceptions\n         * from bubbling up. However, errors here should all correspond to\n         * \"close\" events, where we will handle the error more granularly */\n\n        /* Specifically looking for stream errors that were *not* constructed\n         * from a RST_STREAM response here:\n         * https://github.com/nodejs/node/blob/8b8620d580314050175983402dfddf2674e8e22a/lib/internal/http2/core.js#L2267\n         */\n        if (err.code !== 'ERR_HTTP2_STREAM_ERROR') {\n          this.trace('Node error event: message=' + err.message + ' code=' + err.code + ' errno=' + getSystemErrorName(err.errno) + ' syscall=' + err.syscall);\n          this.internalError = err;\n        }\n\n        this.streamEndWatchers.forEach(watcher => watcher(false));\n      });\n\n      if (this.pendingWrite) {\n        if (!this.pendingWriteCallback) {\n          throw new Error('Invalid state in write handling code');\n        }\n\n        this.trace('sending data chunk of length ' + this.pendingWrite.length + ' (deferred)');\n\n        try {\n          this.writeMessageToStream(this.pendingWrite, this.pendingWriteCallback);\n        } catch (error) {\n          this.endCall({\n            code: constants_1.Status.UNAVAILABLE,\n            details: `Write failed with error ${error.message}`,\n            metadata: new metadata_1.Metadata()\n          });\n        }\n      }\n\n      this.maybeCloseWrites();\n    }\n  }\n\n  start(metadata, listener) {\n    this.trace('Sending metadata');\n    this.listener = listener;\n\n    this.channel._startCallStream(this, metadata);\n\n    this.maybeOutputStatus();\n  }\n\n  destroyHttp2Stream() {\n    var _a; // The http2 stream could already have been destroyed if cancelWithStatus\n    // is called in response to an internal http2 error.\n\n\n    if (this.http2Stream !== null && !this.http2Stream.destroyed) {\n      /* If the call has ended with an OK status, communicate that when closing\n       * the stream, partly to avoid a situation in which we detect an error\n       * RST_STREAM as a result after we have the status */\n      let code;\n\n      if (((_a = this.finalStatus) === null || _a === void 0 ? void 0 : _a.code) === constants_1.Status.OK) {\n        code = http2.constants.NGHTTP2_NO_ERROR;\n      } else {\n        code = http2.constants.NGHTTP2_CANCEL;\n      }\n\n      this.trace('close http2 stream with code ' + code);\n      this.http2Stream.close(code);\n    }\n  }\n\n  cancelWithStatus(status, details) {\n    this.trace('cancelWithStatus code: ' + status + ' details: \"' + details + '\"');\n    this.endCall({\n      code: status,\n      details,\n      metadata: new metadata_1.Metadata()\n    });\n  }\n\n  getDeadline() {\n    const deadlineList = [this.options.deadline];\n\n    if (this.options.parentCall && this.options.flags & constants_1.Propagate.DEADLINE) {\n      deadlineList.push(this.options.parentCall.getDeadline());\n    }\n\n    if (this.configDeadline) {\n      deadlineList.push(this.configDeadline);\n    }\n\n    return getMinDeadline(deadlineList);\n  }\n\n  getCredentials() {\n    return this.credentials;\n  }\n\n  setCredentials(credentials) {\n    this.credentials = this.channelCallCredentials.compose(credentials);\n  }\n\n  getStatus() {\n    return this.finalStatus;\n  }\n\n  getPeer() {\n    var _a, _b;\n\n    return (_b = (_a = this.subchannel) === null || _a === void 0 ? void 0 : _a.getAddress()) !== null && _b !== void 0 ? _b : this.channel.getTarget();\n  }\n\n  getMethod() {\n    return this.methodName;\n  }\n\n  getHost() {\n    return this.options.host;\n  }\n\n  setConfigDeadline(configDeadline) {\n    this.configDeadline = configDeadline;\n  }\n\n  addStatusWatcher(watcher) {\n    this.statusWatchers.push(watcher);\n  }\n\n  addStreamEndWatcher(watcher) {\n    this.streamEndWatchers.push(watcher);\n  }\n\n  addFilters(extraFilters) {\n    this.filterStack.push(extraFilters);\n  }\n\n  getCallNumber() {\n    return this.callNumber;\n  }\n\n  startRead() {\n    /* If the stream has ended with an error, we should not emit any more\n     * messages and we should communicate that the stream has ended */\n    if (this.finalStatus !== null && this.finalStatus.code !== constants_1.Status.OK) {\n      this.readsClosed = true;\n      this.maybeOutputStatus();\n      return;\n    }\n\n    this.canPush = true;\n\n    if (this.http2Stream === null) {\n      this.pendingRead = true;\n    } else {\n      if (this.unpushedReadMessages.length > 0) {\n        const nextMessage = this.unpushedReadMessages.shift();\n        this.push(nextMessage);\n        return;\n      }\n      /* Only resume reading from the http2Stream if we don't have any pending\n       * messages to emit */\n\n\n      this.http2Stream.resume();\n    }\n  }\n\n  maybeCloseWrites() {\n    if (this.writesClosed && !this.isWriteFilterPending && this.http2Stream !== null) {\n      this.trace('calling end() on HTTP/2 stream');\n      this.http2Stream.end();\n    }\n  }\n\n  sendMessageWithContext(context, message) {\n    this.trace('write() called with message of length ' + message.length);\n    const writeObj = {\n      message,\n      flags: context.flags\n    };\n\n    const cb = error => {\n      var _a, _b;\n\n      let code = constants_1.Status.UNAVAILABLE;\n\n      if (((_a = error) === null || _a === void 0 ? void 0 : _a.code) === 'ERR_STREAM_WRITE_AFTER_END') {\n        code = constants_1.Status.INTERNAL;\n      }\n\n      if (error) {\n        this.cancelWithStatus(code, `Write error: ${error.message}`);\n      }\n\n      (_b = context.callback) === null || _b === void 0 ? void 0 : _b.call(context);\n    };\n\n    this.isWriteFilterPending = true;\n    this.filterStack.sendMessage(Promise.resolve(writeObj)).then(message => {\n      this.isWriteFilterPending = false;\n\n      if (this.http2Stream === null) {\n        this.trace('deferring writing data chunk of length ' + message.message.length);\n        this.pendingWrite = message.message;\n        this.pendingWriteCallback = cb;\n      } else {\n        this.trace('sending data chunk of length ' + message.message.length);\n\n        try {\n          this.writeMessageToStream(message.message, cb);\n        } catch (error) {\n          this.endCall({\n            code: constants_1.Status.UNAVAILABLE,\n            details: `Write failed with error ${error.message}`,\n            metadata: new metadata_1.Metadata()\n          });\n        }\n\n        this.maybeCloseWrites();\n      }\n    }, this.handleFilterError.bind(this));\n  }\n\n  halfClose() {\n    this.trace('end() called');\n    this.writesClosed = true;\n    this.maybeCloseWrites();\n  }\n\n}\n\nexports.Http2CallStream = Http2CallStream; //# sourceMappingURL=call-stream.js.map","map":null,"metadata":{},"sourceType":"script"}