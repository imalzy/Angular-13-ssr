{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright 2018 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nvar _asyncToGenerator = require(\"/Users/imalzy/Documents/angular/technical-req-angular-13/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addCommonProtos = exports.loadProtosWithOptionsSync = exports.loadProtosWithOptions = void 0;\n\nconst fs = require(\"fs\");\n\nconst path = require(\"path\");\n\nconst Protobuf = require(\"protobufjs\");\n\nfunction addIncludePathResolver(root, includePaths) {\n  const originalResolvePath = root.resolvePath;\n\n  root.resolvePath = (origin, target) => {\n    if (path.isAbsolute(target)) {\n      return target;\n    }\n\n    for (const directory of includePaths) {\n      const fullPath = path.join(directory, target);\n\n      try {\n        fs.accessSync(fullPath, fs.constants.R_OK);\n        return fullPath;\n      } catch (err) {\n        continue;\n      }\n    }\n\n    process.emitWarning(`${target} not found in any of the include paths ${includePaths}`);\n    return originalResolvePath(origin, target);\n  };\n}\n\nfunction loadProtosWithOptions(_x, _x2) {\n  return _loadProtosWithOptions.apply(this, arguments);\n}\n\nfunction _loadProtosWithOptions() {\n  _loadProtosWithOptions = _asyncToGenerator(function* (filename, options) {\n    const root = new Protobuf.Root();\n    options = options || {};\n\n    if (!!options.includeDirs) {\n      if (!Array.isArray(options.includeDirs)) {\n        return Promise.reject(new Error('The includeDirs option must be an array'));\n      }\n\n      addIncludePathResolver(root, options.includeDirs);\n    }\n\n    const loadedRoot = yield root.load(filename, options);\n    loadedRoot.resolveAll();\n    return loadedRoot;\n  });\n  return _loadProtosWithOptions.apply(this, arguments);\n}\n\nexports.loadProtosWithOptions = loadProtosWithOptions;\n\nfunction loadProtosWithOptionsSync(filename, options) {\n  const root = new Protobuf.Root();\n  options = options || {};\n\n  if (!!options.includeDirs) {\n    if (!Array.isArray(options.includeDirs)) {\n      throw new Error('The includeDirs option must be an array');\n    }\n\n    addIncludePathResolver(root, options.includeDirs);\n  }\n\n  const loadedRoot = root.loadSync(filename, options);\n  loadedRoot.resolveAll();\n  return loadedRoot;\n}\n\nexports.loadProtosWithOptionsSync = loadProtosWithOptionsSync;\n/**\n * Load Google's well-known proto files that aren't exposed by Protobuf.js.\n */\n\nfunction addCommonProtos() {\n  // Protobuf.js exposes: any, duration, empty, field_mask, struct, timestamp,\n  // and wrappers. compiler/plugin is excluded in Protobuf.js and here.\n  // Using constant strings for compatibility with tools like Webpack\n  const apiDescriptor = require('protobufjs/google/protobuf/api.json');\n\n  const descriptorDescriptor = require('protobufjs/google/protobuf/descriptor.json');\n\n  const sourceContextDescriptor = require('protobufjs/google/protobuf/source_context.json');\n\n  const typeDescriptor = require('protobufjs/google/protobuf/type.json');\n\n  Protobuf.common('api', apiDescriptor.nested.google.nested.protobuf.nested);\n  Protobuf.common('descriptor', descriptorDescriptor.nested.google.nested.protobuf.nested);\n  Protobuf.common('source_context', sourceContextDescriptor.nested.google.nested.protobuf.nested);\n  Protobuf.common('type', typeDescriptor.nested.google.nested.protobuf.nested);\n}\n\nexports.addCommonProtos = addCommonProtos; //# sourceMappingURL=util.js.map","map":null,"metadata":{},"sourceType":"script"}